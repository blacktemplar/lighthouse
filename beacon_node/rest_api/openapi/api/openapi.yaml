openapi: 3.0.2
info:
  description: A minimal API specification for the beacon node, which enables a validator
    to connect and perform its obligations on the Ethereum 2.0 phase 0 beacon chain.
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: Minimal Beacon Node API for Validator
  version: 0.2.0
servers:
- url: /
tags:
- description: The minimal set of endpoints to enable a working validator implementation.
  name: MinimalSet
- description: Extra endpoints which are nice-to-haves.
  name: OptionalSet
paths:
  /node/version:
    get:
      description: Requests that the beacon node identify information about its implementation
        in a format similar to a  [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3)
        field.
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/version'
          description: Request successful
        500:
          description: Beacon node internal error.
      summary: Get version string of the running beacon node.
      tags:
      - MinimalSet
  /node/genesis_time:
    get:
      description: Requests the genesis_time parameter from the beacon node, which
        should be consistent across all beacon nodes that follow the same beacon chain.
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genesis_time'
          description: Request successful
        500:
          description: Beacon node internal error.
      summary: Get the genesis_time parameter from beacon node configuration.
      tags:
      - MinimalSet
  /node/syncing:
    get:
      description: Requests the beacon node to describe if it's currently syncing
        or not, and if it is, what block it is up to. This is modelled after the Eth1.0
        JSON-RPC eth_syncing call..
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
          description: Request successful
        500:
          description: Beacon node internal error.
      summary: Poll to see if the the beacon node is syncing.
      tags:
      - MinimalSet
  /node/fork:
    get:
      description: Requests the beacon node to provide which fork version it is currently
        on.
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
          description: Request successful
        500:
          description: Beacon node internal error.
      summary: Get fork information from running beacon node.
      tags:
      - OptionalSet
  /validator/duties:
    get:
      description: Requests the beacon node to provide a set of _duties_, which are
        actions that should be performed by validators, for a particular epoch. Duties
        should only need to be checked once per epoch, however a chain reorganization
        (of > MIN_SEED_LOOKAHEAD epochs) could occur, resulting in a change of duties.
        For full safety, this API call should be polled at every slot to ensure that
        chain reorganizations are recognized, and to ensure that the beacon node is
        properly synchronized.
      parameters:
      - description: An array of hex-encoded BLS public keys
        explode: true
        in: query
        name: validator_pubkeys
        required: true
        schema:
          items:
            $ref: '#/components/schemas/pubkey'
          minItems: 1
          type: array
        style: form
      - explode: true
        in: query
        name: epoch
        required: false
        schema:
          type: integer
        style: form
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ValidatorDuty'
                type: array
          description: Success response
        400:
          description: Invalid request syntax.
        406:
          description: Duties cannot be provided for the requested epoch.
        500:
          description: Beacon node internal error.
        503:
          description: Beacon node is currently syncing, try again later.
      summary: Get validator duties for the requested validators.
      tags:
      - MinimalSet
  /validator/block:
    get:
      description: Requests a beacon node to produce a valid block, which can then
        be signed by a validator.
      parameters:
      - description: The slot for which the block should be proposed.
        explode: true
        in: query
        name: slot
        required: true
        schema:
          format: uint64
          type: integer
        style: form
      - description: The validator's randao reveal value.
        explode: true
        in: query
        name: randao_reveal
        required: true
        schema:
          format: byte
          type: string
        style: form
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeaconBlock'
          description: Success response
        400:
          description: Invalid request syntax.
        500:
          description: Beacon node internal error.
        503:
          description: Beacon node is currently syncing, try again later.
      summary: Produce a new block, without signature.
      tags:
      - MinimalSet
    post:
      description: Instructs the beacon node to broadcast a newly signed beacon block
        to the beacon network, to be included in the beacon chain. The beacon node
        is not required to validate the signed `BeaconBlock`, and a successful response
        (20X) only indicates that the broadcast has been successful. The beacon node
        is expected to integrate the new block into its state, and therefore validate
        the block internally, however blocks which fail the validation are still broadcast
        but a different status code is returned (202)
      parameters:
      - description: The `BeaconBlock` object, as sent from the beacon node originally,
          but now with the signature field completed.
        explode: true
        in: query
        name: beacon_block
        required: true
        schema:
          $ref: '#/components/schemas/BeaconBlock'
        style: form
      responses:
        200:
          description: The block was validated successfully and has been broadcast.
            It has also been integrated into the beacon node's database.
        202:
          description: The block failed validation, but was successfully broadcast
            anyway. It was not integrated into the beacon node's database.
        400:
          description: Invalid request syntax.
        500:
          description: Beacon node internal error.
        503:
          description: Beacon node is currently syncing, try again later.
      summary: Publish a signed block.
      tags:
      - MinimalSet
  /validator/attestation:
    get:
      description: Requests that the beacon node produce an IndexedAttestation, with
        a blank signature field, which the validator will then sign.
      parameters:
      - description: Uniquely identifying which validator this attestation is to be
          produced for.
        explode: true
        in: query
        name: validator_pubkey
        required: true
        schema:
          $ref: '#/components/schemas/pubkey'
        style: form
      - description: The proof-of-custody bit that is to be reported by the requesting
          validator. This bit will be inserted into the appropriate location in the
          returned `IndexedAttestation`.
        explode: true
        in: query
        name: poc_bit
        required: true
        schema:
          format: uint32
          maximum: 1
          minimum: 0
          type: integer
        style: form
      - description: The slot for which the attestation should be proposed.
        explode: true
        in: query
        name: slot
        required: true
        schema:
          type: integer
        style: form
      - description: The shard number for which the attestation is to be proposed.
        explode: true
        in: query
        name: shard
        required: true
        schema:
          type: integer
        style: form
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexedAttestation'
          description: Success response
        400:
          description: Invalid request syntax.
        500:
          description: Beacon node internal error.
        503:
          description: Beacon node is currently syncing, try again later.
      summary: Produce an attestation, without signature.
      tags:
      - MinimalSet
    post:
      description: Instructs the beacon node to broadcast a newly signed IndexedAttestation
        object to the intended shard subnet. The beacon node is not required to validate
        the signed IndexedAttestation, and a successful response (20X) only indicates
        that the broadcast has been successful. The beacon node is expected to integrate
        the new attestation into its state, and therefore validate the attestation
        internally, however attestations which fail the validation are still broadcast
        but a different status code is returned (202)
      parameters:
      - description: An `IndexedAttestation` structure, as originally provided by
          the beacon node, but now with the signature field completed.
        explode: true
        in: query
        name: attestation
        required: true
        schema:
          $ref: '#/components/schemas/IndexedAttestation'
        style: form
      responses:
        200:
          description: The attestation was validated successfully and has been broadcast.
            It has also been integrated into the beacon node's database.
        202:
          description: The attestation failed validation, but was successfully broadcast
            anyway. It was not integrated into the beacon node's database.
        400:
          description: Invalid request syntax.
        500:
          description: Beacon node internal error.
        503:
          description: Beacon node is currently syncing, try again later.
      summary: Publish a signed attestation.
      tags:
      - MinimalSet
components:
  responses:
    Success:
      description: Request successful.
    InvalidRequest:
      description: Invalid request syntax.
    InternalError:
      description: Beacon node internal error.
    CurrentlySyncing:
      description: Beacon node is currently syncing, try again later.
    NotFound:
      description: The requested API endpoint does not exist.
  schemas:
    pubkey:
      description: The validator's BLS public key, uniquely identifying them. _48-bytes,
        hex encoded with 0x prefix, case insensitive._
      format: byte
      pattern: ^0x[a-fA-F0-9]{96}$
      type: string
    version:
      description: A string which uniquely identifies the client implementation and
        its version; similar to [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3).
      example: Lighthouse / v0.1.5 (Linux x86_64)
      type: string
    genesis_time:
      description: The genesis_time configured for the beacon node, which is the unix
        time at which the Eth2.0 chain began.
      example: 1557716289
      format: uint64
      type: integer
    ValidatorDuty:
      example:
        attestation_shard: 6
        block_proposal_slot: 1
        attestation_slot: 0
        validator_pubkey: validator_pubkey
      properties:
        validator_pubkey:
          description: The validator's BLS public key, uniquely identifying them.
            _48-bytes, hex encoded with 0x prefix, case insensitive._
          format: byte
          pattern: ^0x[a-fA-F0-9]{96}$
          type: string
        attestation_slot:
          description: The slot at which the validator must attest.
          format: uint64
          type: integer
        attestation_shard:
          description: The shard in which the validator must attest.
          format: uint64
          type: integer
        block_proposal_slot:
          description: The slot in which a validator must propose a block, or `null`
            if block production is not required.
          format: uint64
          nullable: true
          type: integer
      type: object
    SyncingStatus:
      example:
        highest_slot: 1
        starting_slot: 0
        current_slot: 6
      nullable: true
      properties:
        starting_slot:
          description: The slot at which syncing started (will only be reset after
            the sync reached its head)
          format: uint64
          type: integer
        current_slot:
          description: The most recent slot sync'd by the beacon node.
          format: uint64
          type: integer
        highest_slot:
          description: Globally, the estimated most recent slot number, or current
            target slot number.
          format: uint64
          type: integer
      type: object
    BeaconBlock:
      allOf:
      - $ref: '#/components/schemas/BeaconBlockCommon'
      - $ref: '#/components/schemas/BeaconBlock_allOf'
      description: The [`BeaconBlock`](https://github.com/ethereum/eth2.0-specs/blob/master/specs/core/0_beacon-chain.md#beaconblock)
        object from the Eth2.0 spec.
    BeaconBlockHeader:
      allOf:
      - $ref: '#/components/schemas/BeaconBlockCommon'
      - $ref: '#/components/schemas/BeaconBlockHeader_allOf'
      description: The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/master/specs/core/0_beacon-chain.md#beaconblockheader)
        object from the Eth2.0 spec.
    BeaconBlockCommon:
      properties:
        slot:
          description: The slot to which this block corresponds.
          format: uint64
          type: integer
        parent_root:
          description: The signing merkle root of the parent `BeaconBlock`.
          format: bytes
          pattern: ^0x[a-fA-F0-9]{64}$
          type: string
        state_root:
          description: The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
          format: bytes
          pattern: ^0x[a-fA-F0-9]{64}$
          type: string
        signature:
          description: The BLS signature of the `BeaconBlock` made by the validator
            of the block.
          example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
          format: bytes
          pattern: ^0x[a-fA-F0-9]{192}$
          type: string
      type: object
    BeaconBlockBody:
      description: The [`BeaconBlockBody`](https://github.com/ethereum/eth2.0-specs/blob/master/specs/core/0_beacon-chain.md#beaconblockbody)
        object from the Eth2.0 spec.
      properties:
        randao_reveal:
          description: The RanDAO reveal value provided by the validator.
          format: byte
          pattern: ^0x[a-fA-F0-9]{192}$
          type: string
        eth1_data:
          $ref: '#/components/schemas/Eth1Data'
        graffiti:
          format: byte
          pattern: ^0x[a-fA-F0-9]{64}$
          type: string
        proposer_slashings:
          items:
            $ref: '#/components/schemas/ProposerSlashings'
          type: array
        attester_slashings:
          items:
            $ref: '#/components/schemas/AttesterSlashings'
          type: array
        attestations:
          items:
            $ref: '#/components/schemas/Attestation'
          type: array
        deposits:
          items:
            $ref: '#/components/schemas/Deposit'
          type: array
        voluntary_exits:
          items:
            $ref: '#/components/schemas/VoluntaryExit'
          type: array
        transfers:
          items:
            $ref: '#/components/schemas/Transfer'
          type: array
      type: object
    Fork:
      description: The [`Fork`](https://github.com/ethereum/eth2.0-specs/blob/master/specs/core/0_beacon-chain.md#Fork)
        object from the Eth2.0 spec.
      example:
        previous_version: previous_version
        current_version: current_version
        epoch: 0
      properties:
        previous_version:
          description: Previous fork version.
          format: byte
          pattern: ^0x[a-fA-F0-9]{8}$
          type: string
        current_version:
          description: Current fork version.
          format: byte
          pattern: ^0x[a-fA-F0-9]{8}$
          type: string
        epoch:
          description: Fork epoch number.
          format: uint64
          type: integer
      type: object
    IndexedAttestation:
      description: The [`IndexedAttestation`](https://github.com/ethereum/eth2.0-specs/blob/master/specs/core/0_beacon-chain.md#indexedattestation)
        object from the Eth2.0 spec.
      example:
        custody_bit_0_indices:
        - 0
        - 0
        custody_bit_1_indices:
        - 6
        - 6
        data:
          beacon_block_root: beacon_block_root
          source_root: source_root
          target_epoch: 5
          source_epoch: 1
          target_root: target_root
          crosslink:
            data_root: data_root
            end_epoch: 7
            parent_root: parent_root
            start_epoch: 2
            shard: 5
        signature: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
      properties:
        custody_bit_0_indices:
          description: Validator indices for 0 bits.
          items:
            format: uint64
            type: integer
          type: array
        custody_bit_1_indices:
          description: Validator indices for 1 bits.
          items:
            format: uint64
            type: integer
          type: array
        signature:
          description: The BLS signature of the `IndexedAttestation`, created by the
            validator of the attestation.
          example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
          format: bytes
          pattern: ^0x[a-fA-F0-9]{192}$
          type: string
        data:
          $ref: '#/components/schemas/AttestationData'
      type: object
    AttestationData:
      description: The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/master/specs/core/0_beacon-chain.md#attestationdata)
        object from the Eth2.0 spec.
      example:
        beacon_block_root: beacon_block_root
        source_root: source_root
        target_epoch: 5
        source_epoch: 1
        target_root: target_root
        crosslink:
          data_root: data_root
          end_epoch: 7
          parent_root: parent_root
          start_epoch: 2
          shard: 5
      properties:
        beacon_block_root:
          description: LMD GHOST vote.
          format: byte
          pattern: ^0x[a-fA-F0-9]{64}$
          type: string
        source_epoch:
          description: Source epoch from FFG vote.
          format: uint64
          type: integer
        source_root:
          description: Source root from FFG vote.
          format: byte
          pattern: ^0x[a-fA-F0-9]{64}$
          type: string
        target_epoch:
          description: Target epoch from FFG vote.
          format: uint64
          type: integer
        target_root:
          description: Target root from FFG vote.
          format: byte
          pattern: ^0x[a-fA-F0-9]{64}$
          type: string
        crosslink:
          $ref: '#/components/schemas/CrossLink'
      type: object
    inline_response_200:
      example:
        is_syncing: true
        sync_status:
          highest_slot: 1
          starting_slot: 0
          current_slot: 6
      properties:
        is_syncing:
          description: A boolean of whether the node is currently syncing or not.
          type: boolean
        sync_status:
          $ref: '#/components/schemas/SyncingStatus'
    inline_response_200_1:
      example:
        fork:
          previous_version: previous_version
          current_version: current_version
          epoch: 0
        chain_id: 6
      properties:
        fork:
          $ref: '#/components/schemas/Fork'
        chain_id:
          description: Sometimes called the network id, this number discerns the active
            chain for the beacon node. Analogous to Eth1.0 JSON-RPC net_version.
          format: uint64
          type: integer
    BeaconBlock_allOf:
      properties:
        body:
          $ref: '#/components/schemas/BeaconBlockBody'
    BeaconBlockHeader_allOf:
      properties:
        body_root:
          description: The tree hash merkle root of the `BeaconBlockBody` for the
            `BeaconBlock`
          format: bytes
          pattern: ^0x[a-fA-F0-9]{64}$
          type: string
    Eth1Data:
      description: The [`Eth1Data`](https://github.com/ethereum/eth2.0-specs/blob/master/specs/core/0_beacon-chain.md#eth1data)
        object from the Eth2.0 spec.
      properties:
        deposit_root:
          description: Root of the deposit tree.
          format: byte
          pattern: ^0x[a-fA-F0-9]{64}$
          type: string
        deposit_count:
          description: Total number of deposits.
          format: uint64
          type: integer
        block_hash:
          description: Ethereum 1.x block hash.
          format: byte
          pattern: ^0x[a-fA-F0-9]{64}$
          type: string
    ProposerSlashings:
      description: The [`ProposerSlashing`](https://github.com/ethereum/eth2.0-specs/blob/master/specs/core/0_beacon-chain.md#proposerslashing)
        object from the Eth2.0 spec.
      properties:
        proposer_index:
          description: The index of the proposer to be slashed.
          format: uint64
          type: integer
        header_1:
          $ref: '#/components/schemas/BeaconBlockHeader'
        header_2:
          $ref: '#/components/schemas/BeaconBlockHeader'
    AttesterSlashings:
      description: The [`AttesterSlashing`](https://github.com/ethereum/eth2.0-specs/blob/master/specs/core/0_beacon-chain.md#attesterslashing)
        object from the Eth2.0 spec.
      properties:
        attestation_1:
          $ref: '#/components/schemas/IndexedAttestation'
        attestation_2:
          $ref: '#/components/schemas/IndexedAttestation'
    Attestation:
      description: The [`Attestation`](https://github.com/ethereum/eth2.0-specs/blob/master/specs/core/0_beacon-chain.md#attestation)
        object from the Eth2.0 spec.
      properties:
        aggregation_bitfield:
          description: Attester aggregation bitfield.
          format: byte
          pattern: ^0x[a-fA-F0-9]+$
          type: string
        custody_bitfield:
          description: Custody bitfield.
          format: byte
          pattern: ^0x[a-fA-F0-9]+$
          type: string
        signature:
          description: BLS aggregate signature.
          format: byte
          pattern: ^0x[a-fA-F0-9]{192}$
          type: string
        data:
          $ref: '#/components/schemas/AttestationData'
    DepositData:
      description: The [`DepositData`](https://github.com/ethereum/eth2.0-specs/blob/master/specs/core/0_beacon-chain.md#depositdata)
        object from the Eth2.0 spec.
      properties:
        pubkey:
          description: The validator's BLS public key, uniquely identifying them.
            _48-bytes, hex encoded with 0x prefix, case insensitive._
          format: byte
          pattern: ^0x[a-fA-F0-9]{96}$
          type: string
        withdrawal_credentials:
          description: The withdrawal credentials.
          format: byte
          pattern: ^0x[a-fA-F0-9]{64}$
          type: string
        amount:
          description: Amount in Gwei.
          format: uint64
          type: integer
        signature:
          description: Container self-signature.
          format: byte
          pattern: ^0x[a-fA-F0-9]{192}$
          type: string
    Deposit:
      description: The [`Deposit`](https://github.com/ethereum/eth2.0-specs/blob/master/specs/core/0_beacon-chain.md#deposit)
        object from the Eth2.0 spec.
      properties:
        proof:
          description: Branch in the deposit tree.
          items:
            format: byte
            pattern: ^0x[a-fA-F0-9]{64}$
            type: string
          maxItems: 32
          minItems: 32
          type: array
        index:
          description: Index in the deposit tree.
          format: uint64
          type: integer
        data:
          $ref: '#/components/schemas/DepositData'
    VoluntaryExit:
      description: The [`VoluntaryExit`](https://github.com/ethereum/eth2.0-specs/blob/master/specs/core/0_beacon-chain.md#voluntaryexit)
        object from the Eth2.0 spec.
      properties:
        epoch:
          description: Minimum epoch for processing exit.
          format: uint64
          type: integer
        validator_index:
          description: Index of the exiting validator.
          format: uint64
          type: integer
        signature:
          description: Validator signature.
          format: byte
          pattern: ^0x[a-fA-F0-9]{192}$
          type: string
    Transfer:
      description: The [`Transfer`](https://github.com/ethereum/eth2.0-specs/blob/master/specs/core/0_beacon-chain.md#transfer)
        object from the Eth2.0 spec.
      properties:
        sender:
          description: Sender index.
          format: uint64
          type: integer
        recipient:
          description: Recipient index.
          format: uint64
          type: integer
        amount:
          description: Amount in Gwei.
          format: uint64
          type: integer
        fee:
          description: Fee in Gwei for block producer.
          format: uint64
          type: integer
        slot:
          description: Inclusion slot.
          format: uint64
          type: integer
        pubkey:
          description: Sender withdrawal public key.
          format: byte
          pattern: ^0x[a-fA-F0-9]{96}$
          type: string
        signature:
          description: Sender signature.
          format: byte
          pattern: ^0x[a-fA-F0-9]{192}$
          type: string
    CrossLink:
      description: The [`Crosslink`](https://github.com/ethereum/eth2.0-specs/blob/master/specs/core/0_beacon-chain.md#crosslink)
        object from the Eth2.0 spec, contains data from epochs [`start_epoch`, `end_epoch`).
      example:
        data_root: data_root
        end_epoch: 7
        parent_root: parent_root
        start_epoch: 2
        shard: 5
      properties:
        shard:
          description: The shard number.
          format: uint64
          type: integer
        start_epoch:
          description: The first epoch which the crosslinking data references.
          format: uint64
          type: integer
        end_epoch:
          description: The 'end' epoch referred to by the crosslinking data; no data
            in this Crosslink should refer to the `end_epoch` since it is not included
            in the crosslinking data interval.
          format: uint64
          type: integer
        parent_root:
          description: Root of the previous crosslink.
          format: byte
          pattern: ^0x[a-fA-F0-9]{64}$
          type: string
        data_root:
          description: Root of the crosslinked shard data since the previous crosslink.
          format: byte
          pattern: ^0x[a-fA-F0-9]{64}$
          type: string

