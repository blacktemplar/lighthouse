/*
 * Minimal Beacon Node API for Validator
 *
 * A minimal API specification for the beacon node, which enables a validator to connect and perform its obligations on the Ethereum 2.0 phase 0 beacon chain.
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct OptionalSetApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> OptionalSetApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> OptionalSetApiClient<C> {
        OptionalSetApiClient {
            configuration: configuration,
        }
    }
}

pub trait OptionalSetApi {
    fn node_fork_get(&self, ) -> Box<Future<Item = ::models::InlineResponse2001, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>OptionalSetApi for OptionalSetApiClient<C> {
    fn node_fork_get(&self, ) -> Box<Future<Item = ::models::InlineResponse2001, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/node/fork".to_string())
            .execute(self.configuration.borrow())
    }

}
