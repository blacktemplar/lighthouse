/*
 * Minimal Beacon Node API for Validator
 *
 * A minimal API specification for the beacon node, which enables a validator to connect and perform its obligations on the Ethereum 2.0 phase 0 beacon chain.
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;


#[derive(Debug, Serialize, Deserialize)]
pub struct ValidatorDuty {
    /// The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
    #[serde(rename = "validator_pubkey", skip_serializing_if = "Option::is_none")]
    pub validator_pubkey: Option<String>,
    /// The slot at which the validator must attest.
    #[serde(rename = "attestation_slot", skip_serializing_if = "Option::is_none")]
    pub attestation_slot: Option<i32>,
    /// The shard in which the validator must attest.
    #[serde(rename = "attestation_shard", skip_serializing_if = "Option::is_none")]
    pub attestation_shard: Option<i32>,
    /// The slot in which a validator must propose a block, or `null` if block production is not required.
    #[serde(rename = "block_proposal_slot", skip_serializing_if = "Option::is_none")]
    pub block_proposal_slot: Option<i32>,
}

impl ValidatorDuty {
    pub fn new() -> ValidatorDuty {
        ValidatorDuty {
            validator_pubkey: None,
            attestation_slot: None,
            attestation_shard: None,
            block_proposal_slot: None,
        }
    }
}


