/*
 * Minimal Beacon Node API for Validator
 *
 * A minimal API specification for the beacon node, which enables a validator to connect and perform its obligations on the Ethereum 2.0 phase 0 beacon chain.
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Attestation : The [`Attestation`](https://github.com/ethereum/eth2.0-specs/blob/master/specs/core/0_beacon-chain.md#attestation) object from the Eth2.0 spec.

#[allow(unused_imports)]
use serde_json::Value;


#[derive(Debug, Serialize, Deserialize)]
pub struct Attestation {
    /// Attester aggregation bitfield.
    #[serde(rename = "aggregation_bitfield", skip_serializing_if = "Option::is_none")]
    pub aggregation_bitfield: Option<String>,
    /// Custody bitfield.
    #[serde(rename = "custody_bitfield", skip_serializing_if = "Option::is_none")]
    pub custody_bitfield: Option<String>,
    /// BLS aggregate signature.
    #[serde(rename = "signature", skip_serializing_if = "Option::is_none")]
    pub signature: Option<String>,
    #[serde(rename = "data", skip_serializing_if = "Option::is_none")]
    pub data: Option<::models::AttestationData>,
}

impl Attestation {
    /// The [`Attestation`](https://github.com/ethereum/eth2.0-specs/blob/master/specs/core/0_beacon-chain.md#attestation) object from the Eth2.0 spec.
    pub fn new() -> Attestation {
        Attestation {
            aggregation_bitfield: None,
            custody_bitfield: None,
            signature: None,
            data: None,
        }
    }
}


