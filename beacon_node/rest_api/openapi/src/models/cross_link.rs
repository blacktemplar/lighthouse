/*
 * Minimal Beacon Node API for Validator
 *
 * A minimal API specification for the beacon node, which enables a validator to connect and perform its obligations on the Ethereum 2.0 phase 0 beacon chain.
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// CrossLink : The [`Crosslink`](https://github.com/ethereum/eth2.0-specs/blob/master/specs/core/0_beacon-chain.md#crosslink) object from the Eth2.0 spec, contains data from epochs [`start_epoch`, `end_epoch`).

#[allow(unused_imports)]
use serde_json::Value;


#[derive(Debug, Serialize, Deserialize)]
pub struct CrossLink {
    /// The shard number.
    #[serde(rename = "shard", skip_serializing_if = "Option::is_none")]
    pub shard: Option<i32>,
    /// The first epoch which the crosslinking data references.
    #[serde(rename = "start_epoch", skip_serializing_if = "Option::is_none")]
    pub start_epoch: Option<i32>,
    /// The 'end' epoch referred to by the crosslinking data; no data in this Crosslink should refer to the `end_epoch` since it is not included in the crosslinking data interval.
    #[serde(rename = "end_epoch", skip_serializing_if = "Option::is_none")]
    pub end_epoch: Option<i32>,
    /// Root of the previous crosslink.
    #[serde(rename = "parent_root", skip_serializing_if = "Option::is_none")]
    pub parent_root: Option<String>,
    /// Root of the crosslinked shard data since the previous crosslink.
    #[serde(rename = "data_root", skip_serializing_if = "Option::is_none")]
    pub data_root: Option<String>,
}

impl CrossLink {
    /// The [`Crosslink`](https://github.com/ethereum/eth2.0-specs/blob/master/specs/core/0_beacon-chain.md#crosslink) object from the Eth2.0 spec, contains data from epochs [`start_epoch`, `end_epoch`).
    pub fn new() -> CrossLink {
        CrossLink {
            shard: None,
            start_epoch: None,
            end_epoch: None,
            parent_root: None,
            data_root: None,
        }
    }
}


