#![allow(unused_extern_crates)]
extern crate serde_ignored;
extern crate tokio_core;
extern crate native_tls;
extern crate hyper_tls;
extern crate openssl;
extern crate mime;
extern crate uuid;
extern crate chrono;
extern crate percent_encoding;
extern crate url;


use std::sync::Arc;
use std::marker::PhantomData;
use futures::{Future, future, Stream, stream};
use hyper;
use hyper::{Request, Response, Error, StatusCode};
use hyper::header::{Headers, ContentType};
use self::url::form_urlencoded;
use mimetypes;

use serde_json;


#[allow(unused_imports)]
use std::collections::{HashMap, BTreeMap};
#[allow(unused_imports)]
use swagger;
use std::io;

#[allow(unused_imports)]
use std::collections::BTreeSet;

pub use swagger::auth::Authorization;
use swagger::{ApiError, XSpanId, XSpanIdString, Has, RequestParser};
use swagger::auth::Scopes;

use {Api,
     NodeGenesisTimeGetResponse,
     NodeSyncingGetResponse,
     NodeVersionGetResponse,
     ValidatorAttestationGetResponse,
     ValidatorAttestationPostResponse,
     ValidatorBlockGetResponse,
     ValidatorBlockPostResponse,
     ValidatorDutiesGetResponse,
     NodeForkGetResponse
     };
#[allow(unused_imports)]
use models;

pub mod context;

header! { (Warning, "Warning") => [String] }

mod paths {
    extern crate regex;

    lazy_static! {
        pub static ref GLOBAL_REGEX_SET: regex::RegexSet = regex::RegexSet::new(&[
            r"^/node/fork$",
            r"^/node/genesis_time$",
            r"^/node/syncing$",
            r"^/node/version$",
            r"^/validator/attestation$",
            r"^/validator/block$",
            r"^/validator/duties$"
        ]).unwrap();
    }
    pub static ID_NODE_FORK: usize = 0;
    pub static ID_NODE_GENESIS_TIME: usize = 1;
    pub static ID_NODE_SYNCING: usize = 2;
    pub static ID_NODE_VERSION: usize = 3;
    pub static ID_VALIDATOR_ATTESTATION: usize = 4;
    pub static ID_VALIDATOR_BLOCK: usize = 5;
    pub static ID_VALIDATOR_DUTIES: usize = 6;
}

pub struct NewService<T, C> {
    api_impl: Arc<T>,
    marker: PhantomData<C>,
}

impl<T, C> NewService<T, C>
where
    T: Api<C> + Clone + 'static,
    C: Has<XSpanIdString>  + 'static
{
    pub fn new<U: Into<Arc<T>>>(api_impl: U) -> NewService<T, C> {
        NewService{api_impl: api_impl.into(), marker: PhantomData}
    }
}

impl<T, C> hyper::server::NewService for NewService<T, C>
where
    T: Api<C> + Clone + 'static,
    C: Has<XSpanIdString>  + 'static
{
    type Request = (Request, C);
    type Response = Response;
    type Error = Error;
    type Instance = Service<T, C>;

    fn new_service(&self) -> Result<Self::Instance, io::Error> {
        Ok(Service::new(self.api_impl.clone()))
    }
}

pub struct Service<T, C> {
    api_impl: Arc<T>,
    marker: PhantomData<C>,
}

impl<T, C> Service<T, C>
where
    T: Api<C> + Clone + 'static,
    C: Has<XSpanIdString>  + 'static {
    pub fn new<U: Into<Arc<T>>>(api_impl: U) -> Service<T, C> {
        Service{api_impl: api_impl.into(), marker: PhantomData}
    }
}

impl<T, C> hyper::server::Service for Service<T, C>
where
    T: Api<C> + Clone + 'static,
    C: Has<XSpanIdString>  + 'static
{
    type Request = (Request, C);
    type Response = Response;
    type Error = Error;
    type Future = Box<Future<Item=Response, Error=Error>>;

    fn call(&self, (req, mut context): Self::Request) -> Self::Future {
        let api_impl = self.api_impl.clone();
        let (method, uri, _, headers, body) = req.deconstruct();
        let path = paths::GLOBAL_REGEX_SET.matches(uri.path());

        // This match statement is duplicated below in `parse_operation_id()`.
        // Please update both places if changing how this code is autogenerated.
        match &method {

            // NodeGenesisTimeGet - GET /node/genesis_time
            &hyper::Method::Get if path.matched(paths::ID_NODE_GENESIS_TIME) => {







                Box::new({
                        {{

                                Box::new(api_impl.node_genesis_time_get(&context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &Has<XSpanIdString>).get().0.to_string()));

                                        match result {
                                            Ok(rsp) => match rsp {
                                                NodeGenesisTimeGetResponse::RequestSuccessful

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(200).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::NODE_GENESIS_TIME_GET_REQUEST_SUCCESSFUL.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                                NodeGenesisTimeGetResponse::BeaconNodeInternalError


                                                => {
                                                    response.set_status(StatusCode::try_from(500).unwrap());

                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))

                        }}
                }) as Box<Future<Item=Response, Error=Error>>


            },


            // NodeSyncingGet - GET /node/syncing
            &hyper::Method::Get if path.matched(paths::ID_NODE_SYNCING) => {







                Box::new({
                        {{

                                Box::new(api_impl.node_syncing_get(&context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &Has<XSpanIdString>).get().0.to_string()));

                                        match result {
                                            Ok(rsp) => match rsp {
                                                NodeSyncingGetResponse::RequestSuccessful

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(200).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::NODE_SYNCING_GET_REQUEST_SUCCESSFUL.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                                NodeSyncingGetResponse::BeaconNodeInternalError


                                                => {
                                                    response.set_status(StatusCode::try_from(500).unwrap());

                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))

                        }}
                }) as Box<Future<Item=Response, Error=Error>>


            },


            // NodeVersionGet - GET /node/version
            &hyper::Method::Get if path.matched(paths::ID_NODE_VERSION) => {







                Box::new({
                        {{

                                Box::new(api_impl.node_version_get(&context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &Has<XSpanIdString>).get().0.to_string()));

                                        match result {
                                            Ok(rsp) => match rsp {
                                                NodeVersionGetResponse::RequestSuccessful

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(200).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::NODE_VERSION_GET_REQUEST_SUCCESSFUL.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                                NodeVersionGetResponse::BeaconNodeInternalError


                                                => {
                                                    response.set_status(StatusCode::try_from(500).unwrap());

                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))

                        }}
                }) as Box<Future<Item=Response, Error=Error>>


            },


            // ValidatorAttestationGet - GET /validator/attestation
            &hyper::Method::Get if path.matched(paths::ID_VALIDATOR_ATTESTATION) => {





                // Query parameters (note that non-required or collection query parameters will ignore garbage values, rather than causing a 400 response)
                let query_params = form_urlencoded::parse(uri.query().unwrap_or_default().as_bytes()).collect::<Vec<_>>();
                let param_validator_pubkey = query_params.iter().filter(|e| e.0 == "validator_pubkey").map(|e| e.1.to_owned())

                    .nth(0);
                let param_validator_pubkey = match param_validator_pubkey {
                    Some(param_validator_pubkey) => match param_validator_pubkey.parse::<swagger::ByteArray>() {
                        Ok(param_validator_pubkey) => param_validator_pubkey,
                        Err(e) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't parse query parameter validator_pubkey - doesn't match schema: {}", e)))),
                    },
                    None => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body("Missing required query parameter validator_pubkey"))),
                };
                let param_poc_bit = query_params.iter().filter(|e| e.0 == "poc_bit").map(|e| e.1.to_owned())

                    .nth(0);
                let param_poc_bit = match param_poc_bit {
                    Some(param_poc_bit) => match param_poc_bit.parse::<i32>() {
                        Ok(param_poc_bit) => param_poc_bit,
                        Err(e) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't parse query parameter poc_bit - doesn't match schema: {}", e)))),
                    },
                    None => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body("Missing required query parameter poc_bit"))),
                };
                let param_slot = query_params.iter().filter(|e| e.0 == "slot").map(|e| e.1.to_owned())

                    .nth(0);
                let param_slot = match param_slot {
                    Some(param_slot) => match param_slot.parse::<i32>() {
                        Ok(param_slot) => param_slot,
                        Err(e) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't parse query parameter slot - doesn't match schema: {}", e)))),
                    },
                    None => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body("Missing required query parameter slot"))),
                };
                let param_shard = query_params.iter().filter(|e| e.0 == "shard").map(|e| e.1.to_owned())

                    .nth(0);
                let param_shard = match param_shard {
                    Some(param_shard) => match param_shard.parse::<i32>() {
                        Ok(param_shard) => param_shard,
                        Err(e) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't parse query parameter shard - doesn't match schema: {}", e)))),
                    },
                    None => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body("Missing required query parameter shard"))),
                };



                Box::new({
                        {{

                                Box::new(api_impl.validator_attestation_get(param_validator_pubkey, param_poc_bit, param_slot, param_shard, &context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &Has<XSpanIdString>).get().0.to_string()));

                                        match result {
                                            Ok(rsp) => match rsp {
                                                ValidatorAttestationGetResponse::SuccessResponse

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(200).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::VALIDATOR_ATTESTATION_GET_SUCCESS_RESPONSE.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                                ValidatorAttestationGetResponse::InvalidRequestSyntax


                                                => {
                                                    response.set_status(StatusCode::try_from(400).unwrap());

                                                },
                                                ValidatorAttestationGetResponse::BeaconNodeInternalError


                                                => {
                                                    response.set_status(StatusCode::try_from(500).unwrap());

                                                },
                                                ValidatorAttestationGetResponse::BeaconNodeIsCurrentlySyncing


                                                => {
                                                    response.set_status(StatusCode::try_from(503).unwrap());

                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))

                        }}
                }) as Box<Future<Item=Response, Error=Error>>


            },


            // ValidatorAttestationPost - POST /validator/attestation
            &hyper::Method::Post if path.matched(paths::ID_VALIDATOR_ATTESTATION) => {





                // Query parameters (note that non-required or collection query parameters will ignore garbage values, rather than causing a 400 response)
                let query_params = form_urlencoded::parse(uri.query().unwrap_or_default().as_bytes()).collect::<Vec<_>>();
                let param_attestation = query_params.iter().filter(|e| e.0 == "attestation").map(|e| e.1.to_owned())

                    .nth(0);
                let param_attestation = match param_attestation {
                    Some(param_attestation) => match param_attestation.parse::<models::IndexedAttestation>() {
                        Ok(param_attestation) => param_attestation,
                        Err(e) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't parse query parameter attestation - doesn't match schema: {}", e)))),
                    },
                    None => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body("Missing required query parameter attestation"))),
                };



                Box::new({
                        {{

                                Box::new(api_impl.validator_attestation_post(param_attestation, &context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &Has<XSpanIdString>).get().0.to_string()));

                                        match result {
                                            Ok(rsp) => match rsp {
                                                ValidatorAttestationPostResponse::TheAttestationWasValidatedSuccessfullyAndHasBeenBroadcast


                                                => {
                                                    response.set_status(StatusCode::try_from(200).unwrap());

                                                },
                                                ValidatorAttestationPostResponse::TheAttestationFailedValidation


                                                => {
                                                    response.set_status(StatusCode::try_from(202).unwrap());

                                                },
                                                ValidatorAttestationPostResponse::InvalidRequestSyntax


                                                => {
                                                    response.set_status(StatusCode::try_from(400).unwrap());

                                                },
                                                ValidatorAttestationPostResponse::BeaconNodeInternalError


                                                => {
                                                    response.set_status(StatusCode::try_from(500).unwrap());

                                                },
                                                ValidatorAttestationPostResponse::BeaconNodeIsCurrentlySyncing


                                                => {
                                                    response.set_status(StatusCode::try_from(503).unwrap());

                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))

                        }}
                }) as Box<Future<Item=Response, Error=Error>>


            },


            // ValidatorBlockGet - GET /validator/block
            &hyper::Method::Get if path.matched(paths::ID_VALIDATOR_BLOCK) => {





                // Query parameters (note that non-required or collection query parameters will ignore garbage values, rather than causing a 400 response)
                let query_params = form_urlencoded::parse(uri.query().unwrap_or_default().as_bytes()).collect::<Vec<_>>();
                let param_slot = query_params.iter().filter(|e| e.0 == "slot").map(|e| e.1.to_owned())

                    .nth(0);
                let param_slot = match param_slot {
                    Some(param_slot) => match param_slot.parse::<i32>() {
                        Ok(param_slot) => param_slot,
                        Err(e) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't parse query parameter slot - doesn't match schema: {}", e)))),
                    },
                    None => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body("Missing required query parameter slot"))),
                };
                let param_randao_reveal = query_params.iter().filter(|e| e.0 == "randao_reveal").map(|e| e.1.to_owned())

                    .nth(0);
                let param_randao_reveal = match param_randao_reveal {
                    Some(param_randao_reveal) => match param_randao_reveal.parse::<swagger::ByteArray>() {
                        Ok(param_randao_reveal) => param_randao_reveal,
                        Err(e) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't parse query parameter randao_reveal - doesn't match schema: {}", e)))),
                    },
                    None => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body("Missing required query parameter randao_reveal"))),
                };



                Box::new({
                        {{

                                Box::new(api_impl.validator_block_get(param_slot, param_randao_reveal, &context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &Has<XSpanIdString>).get().0.to_string()));

                                        match result {
                                            Ok(rsp) => match rsp {
                                                ValidatorBlockGetResponse::SuccessResponse

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(200).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::VALIDATOR_BLOCK_GET_SUCCESS_RESPONSE.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                                ValidatorBlockGetResponse::InvalidRequestSyntax


                                                => {
                                                    response.set_status(StatusCode::try_from(400).unwrap());

                                                },
                                                ValidatorBlockGetResponse::BeaconNodeInternalError


                                                => {
                                                    response.set_status(StatusCode::try_from(500).unwrap());

                                                },
                                                ValidatorBlockGetResponse::BeaconNodeIsCurrentlySyncing


                                                => {
                                                    response.set_status(StatusCode::try_from(503).unwrap());

                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))

                        }}
                }) as Box<Future<Item=Response, Error=Error>>


            },


            // ValidatorBlockPost - POST /validator/block
            &hyper::Method::Post if path.matched(paths::ID_VALIDATOR_BLOCK) => {





                // Query parameters (note that non-required or collection query parameters will ignore garbage values, rather than causing a 400 response)
                let query_params = form_urlencoded::parse(uri.query().unwrap_or_default().as_bytes()).collect::<Vec<_>>();
                let param_beacon_block = query_params.iter().filter(|e| e.0 == "beacon_block").map(|e| e.1.to_owned())

                    .nth(0);
                let param_beacon_block = match param_beacon_block {
                    Some(param_beacon_block) => match param_beacon_block.parse::<models::BeaconBlock>() {
                        Ok(param_beacon_block) => param_beacon_block,
                        Err(e) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't parse query parameter beacon_block - doesn't match schema: {}", e)))),
                    },
                    None => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body("Missing required query parameter beacon_block"))),
                };



                Box::new({
                        {{

                                Box::new(api_impl.validator_block_post(param_beacon_block, &context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &Has<XSpanIdString>).get().0.to_string()));

                                        match result {
                                            Ok(rsp) => match rsp {
                                                ValidatorBlockPostResponse::TheBlockWasValidatedSuccessfullyAndHasBeenBroadcast


                                                => {
                                                    response.set_status(StatusCode::try_from(200).unwrap());

                                                },
                                                ValidatorBlockPostResponse::TheBlockFailedValidation


                                                => {
                                                    response.set_status(StatusCode::try_from(202).unwrap());

                                                },
                                                ValidatorBlockPostResponse::InvalidRequestSyntax


                                                => {
                                                    response.set_status(StatusCode::try_from(400).unwrap());

                                                },
                                                ValidatorBlockPostResponse::BeaconNodeInternalError


                                                => {
                                                    response.set_status(StatusCode::try_from(500).unwrap());

                                                },
                                                ValidatorBlockPostResponse::BeaconNodeIsCurrentlySyncing


                                                => {
                                                    response.set_status(StatusCode::try_from(503).unwrap());

                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))

                        }}
                }) as Box<Future<Item=Response, Error=Error>>


            },


            // ValidatorDutiesGet - GET /validator/duties
            &hyper::Method::Get if path.matched(paths::ID_VALIDATOR_DUTIES) => {





                // Query parameters (note that non-required or collection query parameters will ignore garbage values, rather than causing a 400 response)
                let query_params = form_urlencoded::parse(uri.query().unwrap_or_default().as_bytes()).collect::<Vec<_>>();
                let param_validator_pubkeys = query_params.iter().filter(|e| e.0 == "validator_pubkeys").map(|e| e.1.to_owned())
                    .filter_map(|param_validator_pubkeys| param_validator_pubkeys.parse::<swagger::ByteArray>().ok())
                    .collect::<Vec<_>>();
                let param_epoch = query_params.iter().filter(|e| e.0 == "epoch").map(|e| e.1.to_owned())

                    .nth(0);

                let param_epoch = param_epoch.and_then(|param_epoch| param_epoch.parse::<>().ok());



                Box::new({
                        {{

                                Box::new(api_impl.validator_duties_get(param_validator_pubkeys.as_ref(), param_epoch, &context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &Has<XSpanIdString>).get().0.to_string()));

                                        match result {
                                            Ok(rsp) => match rsp {
                                                ValidatorDutiesGetResponse::SuccessResponse

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(200).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::VALIDATOR_DUTIES_GET_SUCCESS_RESPONSE.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                                ValidatorDutiesGetResponse::InvalidRequestSyntax


                                                => {
                                                    response.set_status(StatusCode::try_from(400).unwrap());

                                                },
                                                ValidatorDutiesGetResponse::DutiesCannotBeProvidedForTheRequestedEpoch


                                                => {
                                                    response.set_status(StatusCode::try_from(406).unwrap());

                                                },
                                                ValidatorDutiesGetResponse::BeaconNodeInternalError


                                                => {
                                                    response.set_status(StatusCode::try_from(500).unwrap());

                                                },
                                                ValidatorDutiesGetResponse::BeaconNodeIsCurrentlySyncing


                                                => {
                                                    response.set_status(StatusCode::try_from(503).unwrap());

                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))

                        }}
                }) as Box<Future<Item=Response, Error=Error>>


            },


            // NodeForkGet - GET /node/fork
            &hyper::Method::Get if path.matched(paths::ID_NODE_FORK) => {







                Box::new({
                        {{

                                Box::new(api_impl.node_fork_get(&context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &Has<XSpanIdString>).get().0.to_string()));

                                        match result {
                                            Ok(rsp) => match rsp {
                                                NodeForkGetResponse::RequestSuccessful

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(200).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::NODE_FORK_GET_REQUEST_SUCCESSFUL.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                                NodeForkGetResponse::BeaconNodeInternalError


                                                => {
                                                    response.set_status(StatusCode::try_from(500).unwrap());

                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))

                        }}
                }) as Box<Future<Item=Response, Error=Error>>


            },


            _ => Box::new(future::ok(Response::new().with_status(StatusCode::NotFound))) as Box<Future<Item=Response, Error=Error>>,
        }
    }
}

impl<T, C> Clone for Service<T, C>
{
    fn clone(&self) -> Self {
        Service {
            api_impl: self.api_impl.clone(),
            marker: self.marker.clone(),
        }
    }
}

/// Request parser for `Api`.
pub struct ApiRequestParser;
impl RequestParser for ApiRequestParser {
    fn parse_operation_id(request: &Request) -> Result<&'static str, ()> {
        let path = paths::GLOBAL_REGEX_SET.matches(request.uri().path());
        match request.method() {

            // NodeGenesisTimeGet - GET /node/genesis_time
            &hyper::Method::Get if path.matched(paths::ID_NODE_GENESIS_TIME) => Ok("NodeGenesisTimeGet"),

            // NodeSyncingGet - GET /node/syncing
            &hyper::Method::Get if path.matched(paths::ID_NODE_SYNCING) => Ok("NodeSyncingGet"),

            // NodeVersionGet - GET /node/version
            &hyper::Method::Get if path.matched(paths::ID_NODE_VERSION) => Ok("NodeVersionGet"),

            // ValidatorAttestationGet - GET /validator/attestation
            &hyper::Method::Get if path.matched(paths::ID_VALIDATOR_ATTESTATION) => Ok("ValidatorAttestationGet"),

            // ValidatorAttestationPost - POST /validator/attestation
            &hyper::Method::Post if path.matched(paths::ID_VALIDATOR_ATTESTATION) => Ok("ValidatorAttestationPost"),

            // ValidatorBlockGet - GET /validator/block
            &hyper::Method::Get if path.matched(paths::ID_VALIDATOR_BLOCK) => Ok("ValidatorBlockGet"),

            // ValidatorBlockPost - POST /validator/block
            &hyper::Method::Post if path.matched(paths::ID_VALIDATOR_BLOCK) => Ok("ValidatorBlockPost"),

            // ValidatorDutiesGet - GET /validator/duties
            &hyper::Method::Get if path.matched(paths::ID_VALIDATOR_DUTIES) => Ok("ValidatorDutiesGet"),

            // NodeForkGet - GET /node/fork
            &hyper::Method::Get if path.matched(paths::ID_NODE_FORK) => Ok("NodeForkGet"),
            _ => Err(()),
        }
    }
}
